{"version":3,"sources":["components/Todoitems/Todoitems.js","components/Additem/Additem.js","App.js","serviceWorker.js","index.js"],"names":["Todoitems","props","items","Delete","listItems","length","map","item","react_default","a","createElement","Fragment","key","id","className","title","onClick","Additem","state","Change","e","_this","setState","Object","defineProperty","target","value","Submit","preventDefault","onSubmit","this","type","placeholder","onChange","Component","App","console","log","i","findIndex","splice","push","components_Additem_Additem","components_Todoitems_Todoitems","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSA2BeA,eAxBG,SAACC,GAAU,IAClBC,EAAgBD,EAAhBC,MAAMC,EAAUF,EAAVE,OAEPC,EADOF,EAAMG,OACSH,EAAMI,IAAI,SAAAC,GAClC,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CAAgBC,IAAKL,EAAKM,IACtBL,EAAAC,EAAAC,cAAA,MAAII,UAAU,QACTP,EAAKQ,MACNP,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMb,EAAOI,EAAKM,MAAKL,EAAAC,EAAAC,cAAA,KAAGI,UAAU,0BAKhEN,EAAAC,EAAAC,cAAA,MAAII,UAAU,QAAd,eAAiCN,EAAAC,EAAAC,cAAA,+BACtC,OACIF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACXN,EAAAC,EAAAC,cAAA,MAAIG,GAAG,SACFT,aCiBFa,oNAjCXC,MAAQ,CACJH,MAAO,MAEXI,OAAS,SAACC,GACNC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOZ,GAAKO,EAAEK,OAAOC,WAGhCC,OAAS,SAACP,GACNA,EAAEQ,iBAEsB,KAArBP,EAAKH,MAAMH,QACVM,EAAKpB,MAAMgB,QAAQI,EAAKH,OACxBG,EAAKC,SAAS,CACVP,MAAO,+EAMf,OACIP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAAA,QAAMmB,SAAUC,KAAKH,QACjBnB,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOC,YAAY,eAAeN,MAAOI,KAAKZ,MAAMH,MAAOF,GAAG,QAAQoB,SAAUH,KAAKX,SACjGX,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,UACTvB,EAAAC,EAAAC,cAAA,KAAGI,UAAU,0BA1BfoB,cCmDPC,6MA9CbjB,MAAQ,CACNhB,MAAO,CACL,CAACW,GAAG,EAAEE,MAAO,gCAGjBZ,OAAS,SAACU,GACRuB,QAAQC,IAAIxB,GADG,IAEVX,EAASmB,EAAKH,MAAdhB,MACDoC,EAAIpC,EAAMqC,UAAU,SAAAhC,GAAI,OAAIA,EAAKM,KAAOA,IAC5CX,EAAMsC,OAAOF,EAAE,GACfjB,EAAKC,SAAS,CAACpB,aAEjBe,QAAU,SAACV,GACT,IAAIF,EAASgB,EAAKH,MAAMhB,MAAMG,OAC9BE,EAAKM,GAAKR,EAAS,EAFD,IAGbH,EAASmB,EAAKH,MAAdhB,MACLA,EAAMuC,KAAKlC,GACXc,EAAKC,SAAS,CAACpB,mFAKf,OACEM,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAClBN,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,qBACVF,EAAAC,EAAAC,cAAA,gBAAOF,EAAAC,EAAAC,cAAA,sBACLF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACbN,EAAAC,EAAAC,cAACgC,EAAD,CAASzB,QAASa,KAAKb,UACvBT,EAAAC,EAAAC,cAACiC,EAAD,CAAWzC,MAAO4B,KAAKZ,MAAMhB,MAAOC,OAAQ2B,KAAK3B,UAEnDK,EAAAC,EAAAC,cAAA,KACEI,UAAU,WACV8B,KAAK,yCACLnB,OAAO,SACPV,MAAM,UACN8B,IAAI,uBALN,qBAjCQX,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bee07135.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todoitems.css';\r\n\r\nconst Todoitems = (props) => {\r\n    const {items,Delete} = props;\r\n    let length = items.length;\r\n    const listItems = length ? (items.map(item => {\r\n        return (\r\n            <React.Fragment key={item.id}>\r\n                <li className=\"task\">\r\n                    {item.title}\r\n                    <button onClick={() => Delete(item.id)}><i className=\"fas fa-trash-alt\"></i></button>\r\n                </li>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n    ) : (<li className=\"task\">There is no <strong>item to show</strong></li>)\r\n    return(\r\n        <div className=\"tasker-body\">\r\n            <ul id=\"tasks\">\r\n                {listItems}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Todoitems;","import React, { Component } from 'react';\r\nimport './Additem.css';\r\n\r\nclass Additem extends Component {\r\n    state = {\r\n        title: '',\r\n    }\r\n    Change = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    Submit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(this.state.title !== ''){\r\n            this.props.Additem(this.state);\r\n            this.setState({\r\n                title: ''\r\n            })\r\n        }\r\n        \r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"tasker-header\">\r\n                <form onSubmit={this.Submit}>\r\n                    <input type=\"text\" placeholder=\"Enter a task\" value={this.state.title} id=\"title\" onChange={this.Change} />\r\n                    <button type=\"submit\">\r\n                        <i className=\"fas fa-plus\"></i>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Additem;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Todoitems from './components/Todoitems/Todoitems';\nimport Additem from './components/Additem/Additem';\n\nclass App extends Component {\n\n  state = {\n    items: [\n      {id:1,title: 'this is the example item'}\n    ]\n  }\n  Delete = (id) => {\n    console.log(id);\n    let {items} = this.state;\n    let i = items.findIndex(item => item.id === id)\n    items.splice(i,1)\n    this.setState({items})\n  }\n  Additem = (item) => {\n    let length = this.state.items.length; \n    item.id = length + 1; \n    let {items} = this.state;\n    items.push(item);\n    this.setState({items})\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h2>simple<span>todo</span></h2>\n        <h4>by <span>React</span></h4>\n          <div className=\"tasker\">\n            <Additem Additem={this.Additem} />\n            <Todoitems items={this.state.items} Delete={this.Delete} />\n          </div>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/atefgad/to-do-react\"\n            target=\"_blank\"\n            title=\"Git-Hub\"\n            rel=\"noopener noreferrer\"\n          >\n            @atefgad\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}